apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah-vite
  namespace: f6e00d-tools
spec:
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: latest
      description: Reference of the target image tag.
      name: IMAGE_TAG
      type: string
    - description: Reference the image version of buildah.
      name: BUILDAH_IMAGE
      type: string
    - default: overlay
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the Dockerfile to build.
      name: CONTEXT
      type: string
    - default: docker.io
      description: The Root url of the image registry.
      name: IMAGE_REGISTRY
      type: string
    - default: image-registry-username
      description: The secret name of the secret holding the username.
      name: IMAGE_REGISTRY_USER
      type: string
    - default: image-registry-password
      description: The secret name of the secret holding the password.
      name: IMAGE_REGISTRY_PASS
      type: string
  steps:
    - computeResources: {}
      env:
        - name: IMAGE_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_USER)
              name: $(params.IMAGE_REGISTRY_USER)
        - name: IMAGE_REGISTRY_PASS
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_PASS)
              name: $(params.IMAGE_REGISTRY_PASS)
        - name: VITE_API_URL
          valueFrom:
            secretKeyRef:
              key: VITE_API_URL
              name: vite-secrets
        - name: VITE_BCSC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: VITE_BCSC_CLIENT_ID
              name: vite-secrets
        - name: VITE_BCSC_AUTHORITY
          valueFrom:
            secretKeyRef:
              key: VITE_BCSC_AUTHORITY
              name: vite-secrets
      image: $(params.BUILDAH_IMAGE)
      name: build
      script: |
        #!/usr/bin/env bash
        set -x
        # Login to the registry using credentials from secrets
        buildah login -u $IMAGE_REGISTRY_USER -p $IMAGE_REGISTRY_PASS $(params.IMAGE_REGISTRY)
        # Build the image
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          --no-cache -f $(params.DOCKERFILE) -t $(params.IMAGE_REGISTRY)/$(params.IMAGE):$(params.IMAGE_TAG) --isolation chroot $(params.CONTEXT)
        # Push the image
        buildah --storage-driver=$(params.STORAGE_DRIVER) push $(params.IMAGE_REGISTRY)/$(params.IMAGE):$(params.IMAGE_TAG)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - computeResources: {}
      env:
        - name: TRIVY_USERNAME
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_USER)
              name: $(params.IMAGE_REGISTRY_USER)
        - name: TRIVY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_PASS)
              name: $(params.IMAGE_REGISTRY_PASS)
      image: docker.io/aquasec/trivy
      name: trivy-scan
      script: |
        trivy image $(params.IMAGE_REGISTRY)/$(params.IMAGE):$(params.IMAGE_TAG)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - computeResources: {}
      env:
        - name: IMAGE_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_USER)
              name: $(params.IMAGE_REGISTRY_USER)
        - name: IMAGE_REGISTRY_PASS
          valueFrom:
            secretKeyRef:
              key: $(params.IMAGE_REGISTRY_PASS)
              name: $(params.IMAGE_REGISTRY_PASS)
      image: $(params.BUILDAH_IMAGE)
      name: push
      script: |
        #!/usr/bin/env bash
        set -x
        buildah login -u $IMAGE_REGISTRY_USER -p $IMAGE_REGISTRY_PASS $(params.IMAGE_REGISTRY) > /dev/null
        buildah --storage-driver=$(params.STORAGE_DRIVER) push $(params.IMAGE_REGISTRY)/$(params.IMAGE):$(params.IMAGE_TAG)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
